# Deploys a given tag to test environment
# Does not tag or create a release

name: "CI/CD deploy to TEST"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Branch/Tag/SHA to deploy to test"
        required: true
        default: "dev-20250916094908"
      release_type:
        description: "Version bump type (use 'rc' to keep the same base and just increment RC)"
        required: true
        default: "rc"
        type: choice
        options:
          - rc
          - patch
          - minor
          - major

jobs:
  metadata:
    name: "Set CI/CD metadata"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      build_datetime: ${{ steps.variables.outputs.build_datetime }}
      build_timestamp: ${{ steps.variables.outputs.build_timestamp }}
      build_epoch: ${{ steps.variables.outputs.build_epoch }}
      nodejs_version: ${{ steps.variables.outputs.nodejs_version }}
      python_version: ${{ steps.variables.outputs.python_version }}
      terraform_version: ${{ steps.variables.outputs.terraform_version }}
      version: ${{ steps.variables.outputs.version }}
      tag: ${{ steps.variables.outputs.tag }}
    steps:
      - name: "Checkout tag"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: "Set CI/CD variables"
        id: variables
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "nodejs_version=$(grep "^nodejs" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "python_version=$(grep "^nodejs" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "terraform_version=$(grep "^terraform" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          # TODO: Get the version, but it may not be the .version file as this should come from the CI/CD Pull Request Workflow
          echo "version=$(head -n 1 .version 2> /dev/null || echo unknown)" >> $GITHUB_OUTPUT
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
      - name: "List variables"
        run: |
          export BUILD_DATETIME="${{ steps.variables.outputs.build_datetime }}"
          export BUILD_TIMESTAMP="${{ steps.variables.outputs.build_timestamp }}"
          export BUILD_EPOCH="${{ steps.variables.outputs.build_epoch }}"
          export NODEJS_VERSION="${{ steps.variables.outputs.nodejs_version }}"
          export PYTHON_VERSION="${{ steps.variables.outputs.python_version }}"
          export TERRAFORM_VERSION="${{ steps.variables.outputs.terraform_version }}"
          export VERSION="${{ steps.variables.outputs.version }}"
          export TAG="${{ steps.variables.outputs.tag }}"
          make list-variables
  deploy:
    name: "Deploy to test environment"
    runs-on: ubuntu-latest
    needs: [metadata]
    timeout-minutes: 10080
    permissions:
      id-token: write
      contents: write
    steps:
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: "Checkout Repository"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: "Manage Release"
        env:
          ENVIRONMENT: 'preprod'
          REF: ${{ needs.metadata.outputs.tag }}
          INPUT_RELEASE_TYPE: ${{ inputs.release_type }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: python scripts/seed_users/tag_and_release.py

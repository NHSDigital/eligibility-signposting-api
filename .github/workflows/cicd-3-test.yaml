# Deploys a given tag to test environment
# Does not tag or create a release

name: "CI/CD deploy to TEST"

concurrency:
  group: terraform-deploy-${{ github.event.inputs.environment }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "This is the tag that is going to be deployed"
        required: true
        default: "latest"
      environment:
        description: "Target environment (test only)"
        required: true
        default: "test"
        type: choice
        options:
          - test

jobs:
  metadata:
    name: "Set CI/CD metadata"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      build_datetime: ${{ steps.variables.outputs.build_datetime }}
      build_timestamp: ${{ steps.variables.outputs.build_timestamp }}
      build_epoch: ${{ steps.variables.outputs.build_epoch }}
      nodejs_version: ${{ steps.variables.outputs.nodejs_version }}
      python_version: ${{ steps.variables.outputs.python_version }}
      terraform_version: ${{ steps.variables.outputs.terraform_version }}
      version: ${{ steps.variables.outputs.version }}
      tag: ${{ steps.variables.outputs.tag }}
    steps:
      - name: "Checkout tag"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: "Set CI/CD variables"
        id: variables
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "nodejs_version=$(grep "^nodejs" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "python_version=$(grep "^nodejs" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "terraform_version=$(grep "^terraform" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          # TODO: Get the version, but it may not be the .version file as this should come from the CI/CD Pull Request Workflow
          echo "version=$(head -n 1 .version 2> /dev/null || echo unknown)" >> $GITHUB_OUTPUT
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
      - name: "List variables"
        run: |
          export BUILD_DATETIME="${{ steps.variables.outputs.build_datetime }}"
          export BUILD_TIMESTAMP="${{ steps.variables.outputs.build_timestamp }}"
          export BUILD_EPOCH="${{ steps.variables.outputs.build_epoch }}"
          export NODEJS_VERSION="${{ steps.variables.outputs.nodejs_version }}"
          export PYTHON_VERSION="${{ steps.variables.outputs.python_version }}"
          export TERRAFORM_VERSION="${{ steps.variables.outputs.terraform_version }}"
          export VERSION="${{ steps.variables.outputs.version }}"
          export TAG="${{ steps.variables.outputs.tag }}"
          make list-variables
  deploy:
    name: "Deploy to an environment"
    runs-on: ubuntu-latest
    needs: [metadata]
    environment: ${{ inputs.environment }}
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: write
    steps:
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.metadata.outputs.terraform_version }}

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: "Checkout Repository"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: "Build lambda artefact"
        run: |
          make dependencies install-python
          make build

      - name: "Upload lambda artefact"
        uses: actions/upload-artifact@v4
        with:
          name: lambda
          path: dist/lambda.zip

      - name: "Download Built Lambdas"
        uses: actions/download-artifact@v5
        with:
          name: lambda
          path: ./build

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/service-roles/github-actions-api-deployment-role
          aws-region: eu-west-2

      - name: "Terraform Apply"
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          WORKSPACE: "default"
          TF_VAR_API_CA_CERT: ${{ secrets.API_CA_CERT }}
          TF_VAR_API_CLIENT_CERT: ${{ secrets.API_CLIENT_CERT }}
          TF_VAR_API_PRIVATE_KEY_CERT: ${{ secrets.API_PRIVATE_KEY_CERT }}
          TF_VAR_SPLUNK_HEC_TOKEN: ${{ secrets.SPLUNK_HEC_TOKEN }}
          TF_VAR_SPLUNK_HEC_ENDPOINT: ${{ secrets.SPLUNK_HEC_ENDPOINT }}
        run: |
          mkdir -p ./build
          echo "Running: make terraform env=$ENVIRONMENT workspace=$WORKSPACE stack=networking tf-command=apply"
          make terraform env=$ENVIRONMENT stack=networking tf-command=apply workspace=$WORKSPACE
          echo "Running: make terraform env=$ENVIRONMENT workspace=$WORKSPACE stack=api-layer tf-command=apply"
          make terraform env=$ENVIRONMENT stack=api-layer tf-command=apply workspace=$WORKSPACE
        working-directory: ./infrastructure
  regression-tests:
    name: "Regression Tests"
    needs: deploy
    uses: ./.github/workflows/regression-tests.yml
    with:
      ENVIRONMENT: "test"
      VERSION_NUMBER: "main"
    secrets: inherit

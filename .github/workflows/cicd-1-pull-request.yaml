name: "1. CI | Pull Request"

# The total recommended execution time for the "CI/CD Pull Request" workflow is around 20 minutes.

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  metadata:
    name: "Set CI/CD metadata"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      build_datetime: ${{ steps.variables.outputs.build_datetime }}
      build_timestamp: ${{ steps.variables.outputs.build_timestamp }}
      build_epoch: ${{ steps.variables.outputs.build_epoch }}
      nodejs_version: ${{ steps.variables.outputs.nodejs_version }}
      python_version: ${{ steps.variables.outputs.python_version }}
      terraform_version: ${{ steps.variables.outputs.terraform_version }}
      version: ${{ steps.variables.outputs.version }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}

      - name: "Set CI/CD variables"
        id: variables
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "nodejs_version=$(grep "^nodejs" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "python_version=$(grep "^nodejs" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "terraform_version=$(grep "^terraform" .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "version=dev-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: "List variables"
        run: |
          echo "Deploying to: DEV"
          echo "VERSION=${{ steps.variables.outputs.version }}"

  publish:
    name: "Publish to dev"
    runs-on: ubuntu-latest
    needs: [metadata]
    timeout-minutes: 30
    environment: "dev"
    permissions:
      id-token: write
      contents: write
    steps:
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.metadata.outputs.terraform_version }}

      - name: "Set up Python"
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: "Checkout Repository"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}

      - name: "Build lambda artefact"
        run: |
          make dependencies install-python
          make build

      - name: "Upload lambda artefact for cross-workflow use"
        uses: actions/upload-artifact@v4
        with:
          name: lambda-${{ needs.metadata.outputs.version }}
          path: dist/lambda.zip

      - name: "Download Built Lambdas"
        uses: actions/download-artifact@v5
        with:
          name: lambda-${{ needs.metadata.outputs.version }}
          path: ./build

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/service-roles/github-actions-api-deployment-role
          aws-region: eu-west-2

      - name: "Terraform Apply"
        env:
          ENVIRONMENT: dev
          WORKSPACE: "default"
          TF_VAR_API_CA_CERT: ${{ secrets.API_CA_CERT }}
          TF_VAR_API_CLIENT_CERT: ${{ secrets.API_CLIENT_CERT }}
          TF_VAR_API_PRIVATE_KEY_CERT: ${{ secrets.API_PRIVATE_KEY_CERT }}
          TF_VAR_SPLUNK_HEC_TOKEN: ${{ secrets.SPLUNK_HEC_TOKEN }}
          TF_VAR_SPLUNK_HEC_ENDPOINT: ${{ secrets.SPLUNK_HEC_ENDPOINT }}

        run: |
          mkdir -p ./build
          echo "Running: make terraform env=$ENVIRONMENT workspace=$WORKSPACE stack=networking tf-command=apply"
          make terraform env=$ENVIRONMENT stack=networking tf-command=apply workspace=$WORKSPACE
          echo "Running: make terraform env=$ENVIRONMENT workspace=$WORKSPACE stack=api-layer tf-command=apply"
          make terraform env=$ENVIRONMENT stack=api-layer tf-command=apply workspace=$WORKSPACE
        working-directory: ./infrastructure

      - name: "Extract S3 bucket name from Terraform output"
        id: tf_output
        run: |
          BUCKET=$(terraform output -raw lambda_bucket)
          echo "bucket_name=$BUCKET" >> $GITHUB_OUTPUT
        working-directory: ./infrastructure

      - name: "Upload lambda artifact to S3"
        run: |
          aws s3 cp ./build/lambda.zip \
            s3://${{ steps.tf_output.outputs.bucket_name }}/artifacts/${{ needs.metadata.outputs.version }}/lambda.zip \
            --region eu-west-2

      - name: "Tag the dev deployment"
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ needs.metadata.outputs.version }}
          git push origin ${{ needs.metadata.outputs.version }}


  regression-tests:
    name: "Regression Tests"
    needs: publish
    uses: ./.github/workflows/regression-tests.yml
    with:
      ENVIRONMENT: "dev"
      VERSION_NUMBER: "main"
    secrets: inherit
